// <auto-generated />
using System;
using DataBrowser.Entities.SQLite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataBrowser.DB.EFCore.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200430194314_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("DataBrowser.Domain.Entities.Extra", b =>
                {
                    b.Property<int>("ExtraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TransatableItemFk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueType")
                        .HasColumnType("TEXT");

                    b.HasKey("ExtraId");

                    b.HasIndex("NodeId");

                    b.HasIndex("TransatableItemFk")
                        .IsUnique();

                    b.ToTable("Extra");
                });

            modelBuilder.Entity("DataBrowser.Domain.Entities.Hub", b =>
                {
                    b.Property<int>("HubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackgroundMediaURL")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DecimalNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DecimalSeparator")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultLanguage")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultView")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DescriptionFk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmptyCellDefaultValue")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogoURL")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxObservationsAfterCriteria")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SloganFk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SupportedLanguages")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TitleFk")
                        .HasColumnType("INTEGER");

                    b.HasKey("HubId");

                    b.HasIndex("DescriptionFk")
                        .IsUnique();

                    b.HasIndex("SloganFk")
                        .IsUnique();

                    b.HasIndex("TitleFk")
                        .IsUnique();

                    b.ToTable("Hubs");
                });

            modelBuilder.Entity("DataBrowser.Domain.Entities.Node", b =>
                {
                    b.Property<int>("NodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Agency")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthHttpPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthHttpUsername")
                        .HasColumnType("TEXT");

                    b.Property<string>("BackgroundMediaURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategorySchemaExcludes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CriteriaSelectionMode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DecimalNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DecimalSeparatorFk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Default")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultView")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DescriptionFk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmptyCellDefaultValue")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EnableHttpAuth")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableProxy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EndPoint")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndPointFormatSupported")
                        .HasColumnType("TEXT");

                    b.Property<string>("LabelDimensionTemporal")
                        .HasColumnType("TEXT");

                    b.Property<string>("LabelDimensionTerritorial")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Logo")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProxyAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProxyPassword")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProxyPort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProxyUsername")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShowDataflowUncategorized")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SloganFk")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TitleFk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseProxySystem")
                        .HasColumnType("INTEGER");

                    b.HasKey("NodeId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DecimalSeparatorFk")
                        .IsUnique();

                    b.HasIndex("DescriptionFk")
                        .IsUnique();

                    b.HasIndex("SloganFk")
                        .IsUnique();

                    b.HasIndex("TitleFk")
                        .IsUnique();

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("DataBrowser.Domain.Entities.TransatableItem", b =>
                {
                    b.Property<int>("TransatableItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransatableItemId");

                    b.ToTable("TransatableItem");
                });

            modelBuilder.Entity("DataBrowser.Domain.Entities.TransatableItemValue", b =>
                {
                    b.Property<int>("TransatableItemFk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("TransatableItemFk", "Language");

                    b.ToTable("TransatableItemValue");
                });

            modelBuilder.Entity("DataBrowser.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Settings")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DataBrowser.Domain.Entities.Extra", b =>
                {
                    b.HasOne("DataBrowser.Domain.Entities.Node", null)
                        .WithMany("Extras")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataBrowser.Domain.Entities.TransatableItem", "TransatableItem")
                        .WithOne()
                        .HasForeignKey("DataBrowser.Domain.Entities.Extra", "TransatableItemFk")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DataBrowser.Domain.Entities.Hub", b =>
                {
                    b.HasOne("DataBrowser.Domain.Entities.TransatableItem", "Description")
                        .WithOne()
                        .HasForeignKey("DataBrowser.Domain.Entities.Hub", "DescriptionFk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DataBrowser.Domain.Entities.TransatableItem", "Slogan")
                        .WithOne()
                        .HasForeignKey("DataBrowser.Domain.Entities.Hub", "SloganFk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DataBrowser.Domain.Entities.TransatableItem", "Title")
                        .WithOne()
                        .HasForeignKey("DataBrowser.Domain.Entities.Hub", "TitleFk")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DataBrowser.Domain.Entities.Node", b =>
                {
                    b.HasOne("DataBrowser.Domain.Entities.TransatableItem", "DecimalSeparator")
                        .WithOne()
                        .HasForeignKey("DataBrowser.Domain.Entities.Node", "DecimalSeparatorFk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DataBrowser.Domain.Entities.TransatableItem", "Description")
                        .WithOne()
                        .HasForeignKey("DataBrowser.Domain.Entities.Node", "DescriptionFk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DataBrowser.Domain.Entities.TransatableItem", "Slogan")
                        .WithOne()
                        .HasForeignKey("DataBrowser.Domain.Entities.Node", "SloganFk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DataBrowser.Domain.Entities.TransatableItem", "Title")
                        .WithOne()
                        .HasForeignKey("DataBrowser.Domain.Entities.Node", "TitleFk")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DataBrowser.Domain.Entities.TransatableItemValue", b =>
                {
                    b.HasOne("DataBrowser.Domain.Entities.TransatableItem", "TransatableItem")
                        .WithMany("TransatableItemValues")
                        .HasForeignKey("TransatableItemFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

#pragma warning restore 612, 618
        }
    }
}
